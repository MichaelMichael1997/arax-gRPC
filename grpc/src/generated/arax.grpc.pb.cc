// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: arax.proto

#include "arax.pb.h"
#include "arax.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace arax {

static const char* Arax_method_names[] = {
  "/arax.Arax/Arax_clean",
  "/arax.Arax/Arax_accel_list",
  "/arax.Arax/Arax_pipe_get_revision",
  "/arax.Arax/Arax_pipe_add_process",
  "/arax.Arax/Arax_pipe_del_process",
  "/arax.Arax/Arax_accel_list_free",
  "/arax.Arax/Arax_accel_type",
  "/arax.Arax/Arax_buffer",
  "/arax.Arax/Arax_proc_register",
  "/arax.Arax/Arax_proc_put",
  "/arax.Arax/Arax_accel_acquire_type",
  "/arax.Arax/Arax_accel_release",
  "/arax.Arax/Arax_data_set",
  "/arax.Arax/Arax_task_free",
  "/arax.Arax/Arax_task_issue",
  "/arax.Arax/Arax_task_wait",
  "/arax.Arax/Arax_pipe_get_orphan_vaccel",
  "/arax.Arax/Arax_pipe_add_orphan_vaccel",
  "/arax.Arax/Arax_pipe_have_orphan_vaccels",
  "/arax.Arax/Arax_pipe_remove_orphan_vaccel",
};

std::unique_ptr< Arax::Stub> Arax::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Arax::Stub> stub(new Arax::Stub(channel, options));
  return stub;
}

Arax::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Arax_clean_(Arax_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Arax_accel_list_(Arax_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Arax_pipe_get_revision_(Arax_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Arax_pipe_add_process_(Arax_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Arax_pipe_del_process_(Arax_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Arax_accel_list_free_(Arax_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Arax_accel_type_(Arax_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Arax_buffer_(Arax_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Arax_proc_register_(Arax_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Arax_proc_put_(Arax_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Arax_accel_acquire_type_(Arax_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Arax_accel_release_(Arax_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Arax_data_set_(Arax_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Arax_task_free_(Arax_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Arax_task_issue_(Arax_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Arax_task_wait_(Arax_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Arax_pipe_get_orphan_vaccel_(Arax_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Arax_pipe_add_orphan_vaccel_(Arax_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Arax_pipe_have_orphan_vaccels_(Arax_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Arax_pipe_remove_orphan_vaccel_(Arax_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Arax::Stub::Arax_clean(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Arax_clean_, context, request, response);
}

void Arax::Stub::async::Arax_clean(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_clean_, context, request, response, std::move(f));
}

void Arax::Stub::async::Arax_clean(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_clean_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Arax::Stub::PrepareAsyncArax_cleanRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Arax_clean_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Arax::Stub::AsyncArax_cleanRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncArax_cleanRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Arax::Stub::Arax_accel_list(::grpc::ClientContext* context, const ::arax::AccelListRequest& request, ::arax::AccelListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::arax::AccelListRequest, ::arax::AccelListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Arax_accel_list_, context, request, response);
}

void Arax::Stub::async::Arax_accel_list(::grpc::ClientContext* context, const ::arax::AccelListRequest* request, ::arax::AccelListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::arax::AccelListRequest, ::arax::AccelListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_accel_list_, context, request, response, std::move(f));
}

void Arax::Stub::async::Arax_accel_list(::grpc::ClientContext* context, const ::arax::AccelListRequest* request, ::arax::AccelListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_accel_list_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::arax::AccelListResponse>* Arax::Stub::PrepareAsyncArax_accel_listRaw(::grpc::ClientContext* context, const ::arax::AccelListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::arax::AccelListResponse, ::arax::AccelListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Arax_accel_list_, context, request);
}

::grpc::ClientAsyncResponseReader< ::arax::AccelListResponse>* Arax::Stub::AsyncArax_accel_listRaw(::grpc::ClientContext* context, const ::arax::AccelListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncArax_accel_listRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Arax::Stub::Arax_pipe_get_revision(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::arax::RevisionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::arax::RevisionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Arax_pipe_get_revision_, context, request, response);
}

void Arax::Stub::async::Arax_pipe_get_revision(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::arax::RevisionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::arax::RevisionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_pipe_get_revision_, context, request, response, std::move(f));
}

void Arax::Stub::async::Arax_pipe_get_revision(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::arax::RevisionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_pipe_get_revision_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::arax::RevisionResponse>* Arax::Stub::PrepareAsyncArax_pipe_get_revisionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::arax::RevisionResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Arax_pipe_get_revision_, context, request);
}

::grpc::ClientAsyncResponseReader< ::arax::RevisionResponse>* Arax::Stub::AsyncArax_pipe_get_revisionRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncArax_pipe_get_revisionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Arax::Stub::Arax_pipe_add_process(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::arax::ProcCounter* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::arax::ProcCounter, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Arax_pipe_add_process_, context, request, response);
}

void Arax::Stub::async::Arax_pipe_add_process(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::arax::ProcCounter* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::arax::ProcCounter, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_pipe_add_process_, context, request, response, std::move(f));
}

void Arax::Stub::async::Arax_pipe_add_process(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::arax::ProcCounter* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_pipe_add_process_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::arax::ProcCounter>* Arax::Stub::PrepareAsyncArax_pipe_add_processRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::arax::ProcCounter, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Arax_pipe_add_process_, context, request);
}

::grpc::ClientAsyncResponseReader< ::arax::ProcCounter>* Arax::Stub::AsyncArax_pipe_add_processRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncArax_pipe_add_processRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Arax::Stub::Arax_pipe_del_process(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::arax::ProcCounter* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::arax::ProcCounter, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Arax_pipe_del_process_, context, request, response);
}

void Arax::Stub::async::Arax_pipe_del_process(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::arax::ProcCounter* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::arax::ProcCounter, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_pipe_del_process_, context, request, response, std::move(f));
}

void Arax::Stub::async::Arax_pipe_del_process(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::arax::ProcCounter* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_pipe_del_process_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::arax::ProcCounter>* Arax::Stub::PrepareAsyncArax_pipe_del_processRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::arax::ProcCounter, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Arax_pipe_del_process_, context, request);
}

::grpc::ClientAsyncResponseReader< ::arax::ProcCounter>* Arax::Stub::AsyncArax_pipe_del_processRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncArax_pipe_del_processRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Arax::Stub::Arax_accel_list_free(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Arax_accel_list_free_, context, request, response);
}

void Arax::Stub::async::Arax_accel_list_free(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_accel_list_free_, context, request, response, std::move(f));
}

void Arax::Stub::async::Arax_accel_list_free(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_accel_list_free_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Arax::Stub::PrepareAsyncArax_accel_list_freeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Arax_accel_list_free_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Arax::Stub::AsyncArax_accel_list_freeRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncArax_accel_list_freeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Arax::Stub::Arax_accel_type(::grpc::ClientContext* context, const ::arax::AccelDescriptor& request, ::arax::AccelListRequest* response) {
  return ::grpc::internal::BlockingUnaryCall< ::arax::AccelDescriptor, ::arax::AccelListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Arax_accel_type_, context, request, response);
}

void Arax::Stub::async::Arax_accel_type(::grpc::ClientContext* context, const ::arax::AccelDescriptor* request, ::arax::AccelListRequest* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::arax::AccelDescriptor, ::arax::AccelListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_accel_type_, context, request, response, std::move(f));
}

void Arax::Stub::async::Arax_accel_type(::grpc::ClientContext* context, const ::arax::AccelDescriptor* request, ::arax::AccelListRequest* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_accel_type_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::arax::AccelListRequest>* Arax::Stub::PrepareAsyncArax_accel_typeRaw(::grpc::ClientContext* context, const ::arax::AccelDescriptor& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::arax::AccelListRequest, ::arax::AccelDescriptor, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Arax_accel_type_, context, request);
}

::grpc::ClientAsyncResponseReader< ::arax::AccelListRequest>* Arax::Stub::AsyncArax_accel_typeRaw(::grpc::ClientContext* context, const ::arax::AccelDescriptor& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncArax_accel_typeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Arax::Stub::Arax_buffer(::grpc::ClientContext* context, const ::arax::RequestBuffer& request, ::arax::ResourceID* response) {
  return ::grpc::internal::BlockingUnaryCall< ::arax::RequestBuffer, ::arax::ResourceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Arax_buffer_, context, request, response);
}

void Arax::Stub::async::Arax_buffer(::grpc::ClientContext* context, const ::arax::RequestBuffer* request, ::arax::ResourceID* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::arax::RequestBuffer, ::arax::ResourceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_buffer_, context, request, response, std::move(f));
}

void Arax::Stub::async::Arax_buffer(::grpc::ClientContext* context, const ::arax::RequestBuffer* request, ::arax::ResourceID* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_buffer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::arax::ResourceID>* Arax::Stub::PrepareAsyncArax_bufferRaw(::grpc::ClientContext* context, const ::arax::RequestBuffer& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::arax::ResourceID, ::arax::RequestBuffer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Arax_buffer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::arax::ResourceID>* Arax::Stub::AsyncArax_bufferRaw(::grpc::ClientContext* context, const ::arax::RequestBuffer& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncArax_bufferRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Arax::Stub::Arax_proc_register(::grpc::ClientContext* context, const ::arax::ProcRequest& request, ::arax::ResourceID* response) {
  return ::grpc::internal::BlockingUnaryCall< ::arax::ProcRequest, ::arax::ResourceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Arax_proc_register_, context, request, response);
}

void Arax::Stub::async::Arax_proc_register(::grpc::ClientContext* context, const ::arax::ProcRequest* request, ::arax::ResourceID* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::arax::ProcRequest, ::arax::ResourceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_proc_register_, context, request, response, std::move(f));
}

void Arax::Stub::async::Arax_proc_register(::grpc::ClientContext* context, const ::arax::ProcRequest* request, ::arax::ResourceID* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_proc_register_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::arax::ResourceID>* Arax::Stub::PrepareAsyncArax_proc_registerRaw(::grpc::ClientContext* context, const ::arax::ProcRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::arax::ResourceID, ::arax::ProcRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Arax_proc_register_, context, request);
}

::grpc::ClientAsyncResponseReader< ::arax::ResourceID>* Arax::Stub::AsyncArax_proc_registerRaw(::grpc::ClientContext* context, const ::arax::ProcRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncArax_proc_registerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Arax::Stub::Arax_proc_put(::grpc::ClientContext* context, const ::arax::AraxProc& request, ::arax::ProcCounter* response) {
  return ::grpc::internal::BlockingUnaryCall< ::arax::AraxProc, ::arax::ProcCounter, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Arax_proc_put_, context, request, response);
}

void Arax::Stub::async::Arax_proc_put(::grpc::ClientContext* context, const ::arax::AraxProc* request, ::arax::ProcCounter* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::arax::AraxProc, ::arax::ProcCounter, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_proc_put_, context, request, response, std::move(f));
}

void Arax::Stub::async::Arax_proc_put(::grpc::ClientContext* context, const ::arax::AraxProc* request, ::arax::ProcCounter* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_proc_put_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::arax::ProcCounter>* Arax::Stub::PrepareAsyncArax_proc_putRaw(::grpc::ClientContext* context, const ::arax::AraxProc& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::arax::ProcCounter, ::arax::AraxProc, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Arax_proc_put_, context, request);
}

::grpc::ClientAsyncResponseReader< ::arax::ProcCounter>* Arax::Stub::AsyncArax_proc_putRaw(::grpc::ClientContext* context, const ::arax::AraxProc& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncArax_proc_putRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Arax::Stub::Arax_accel_acquire_type(::grpc::ClientContext* context, const ::arax::AccelRequest& request, ::arax::ResourceID* response) {
  return ::grpc::internal::BlockingUnaryCall< ::arax::AccelRequest, ::arax::ResourceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Arax_accel_acquire_type_, context, request, response);
}

void Arax::Stub::async::Arax_accel_acquire_type(::grpc::ClientContext* context, const ::arax::AccelRequest* request, ::arax::ResourceID* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::arax::AccelRequest, ::arax::ResourceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_accel_acquire_type_, context, request, response, std::move(f));
}

void Arax::Stub::async::Arax_accel_acquire_type(::grpc::ClientContext* context, const ::arax::AccelRequest* request, ::arax::ResourceID* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_accel_acquire_type_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::arax::ResourceID>* Arax::Stub::PrepareAsyncArax_accel_acquire_typeRaw(::grpc::ClientContext* context, const ::arax::AccelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::arax::ResourceID, ::arax::AccelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Arax_accel_acquire_type_, context, request);
}

::grpc::ClientAsyncResponseReader< ::arax::ResourceID>* Arax::Stub::AsyncArax_accel_acquire_typeRaw(::grpc::ClientContext* context, const ::arax::AccelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncArax_accel_acquire_typeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Arax::Stub::Arax_accel_release(::grpc::ClientContext* context, const ::arax::ResourceID& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::arax::ResourceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Arax_accel_release_, context, request, response);
}

void Arax::Stub::async::Arax_accel_release(::grpc::ClientContext* context, const ::arax::ResourceID* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::arax::ResourceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_accel_release_, context, request, response, std::move(f));
}

void Arax::Stub::async::Arax_accel_release(::grpc::ClientContext* context, const ::arax::ResourceID* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_accel_release_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Arax::Stub::PrepareAsyncArax_accel_releaseRaw(::grpc::ClientContext* context, const ::arax::ResourceID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::arax::ResourceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Arax_accel_release_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Arax::Stub::AsyncArax_accel_releaseRaw(::grpc::ClientContext* context, const ::arax::ResourceID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncArax_accel_releaseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Arax::Stub::Arax_data_set(::grpc::ClientContext* context, const ::arax::DataSet& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::arax::DataSet, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Arax_data_set_, context, request, response);
}

void Arax::Stub::async::Arax_data_set(::grpc::ClientContext* context, const ::arax::DataSet* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::arax::DataSet, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_data_set_, context, request, response, std::move(f));
}

void Arax::Stub::async::Arax_data_set(::grpc::ClientContext* context, const ::arax::DataSet* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_data_set_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Arax::Stub::PrepareAsyncArax_data_setRaw(::grpc::ClientContext* context, const ::arax::DataSet& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::arax::DataSet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Arax_data_set_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Arax::Stub::AsyncArax_data_setRaw(::grpc::ClientContext* context, const ::arax::DataSet& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncArax_data_setRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Arax::Stub::Arax_task_free(::grpc::ClientContext* context, const ::arax::Task& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::arax::Task, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Arax_task_free_, context, request, response);
}

void Arax::Stub::async::Arax_task_free(::grpc::ClientContext* context, const ::arax::Task* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::arax::Task, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_task_free_, context, request, response, std::move(f));
}

void Arax::Stub::async::Arax_task_free(::grpc::ClientContext* context, const ::arax::Task* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_task_free_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Arax::Stub::PrepareAsyncArax_task_freeRaw(::grpc::ClientContext* context, const ::arax::Task& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::arax::Task, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Arax_task_free_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Arax::Stub::AsyncArax_task_freeRaw(::grpc::ClientContext* context, const ::arax::Task& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncArax_task_freeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Arax::Stub::Arax_task_issue(::grpc::ClientContext* context, const ::arax::TaskRequest& request, ::arax::ResourceID* response) {
  return ::grpc::internal::BlockingUnaryCall< ::arax::TaskRequest, ::arax::ResourceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Arax_task_issue_, context, request, response);
}

void Arax::Stub::async::Arax_task_issue(::grpc::ClientContext* context, const ::arax::TaskRequest* request, ::arax::ResourceID* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::arax::TaskRequest, ::arax::ResourceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_task_issue_, context, request, response, std::move(f));
}

void Arax::Stub::async::Arax_task_issue(::grpc::ClientContext* context, const ::arax::TaskRequest* request, ::arax::ResourceID* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_task_issue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::arax::ResourceID>* Arax::Stub::PrepareAsyncArax_task_issueRaw(::grpc::ClientContext* context, const ::arax::TaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::arax::ResourceID, ::arax::TaskRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Arax_task_issue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::arax::ResourceID>* Arax::Stub::AsyncArax_task_issueRaw(::grpc::ClientContext* context, const ::arax::TaskRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncArax_task_issueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Arax::Stub::Arax_task_wait(::grpc::ClientContext* context, const ::arax::Task& request, ::arax::Task* response) {
  return ::grpc::internal::BlockingUnaryCall< ::arax::Task, ::arax::Task, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Arax_task_wait_, context, request, response);
}

void Arax::Stub::async::Arax_task_wait(::grpc::ClientContext* context, const ::arax::Task* request, ::arax::Task* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::arax::Task, ::arax::Task, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_task_wait_, context, request, response, std::move(f));
}

void Arax::Stub::async::Arax_task_wait(::grpc::ClientContext* context, const ::arax::Task* request, ::arax::Task* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_task_wait_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::arax::Task>* Arax::Stub::PrepareAsyncArax_task_waitRaw(::grpc::ClientContext* context, const ::arax::Task& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::arax::Task, ::arax::Task, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Arax_task_wait_, context, request);
}

::grpc::ClientAsyncResponseReader< ::arax::Task>* Arax::Stub::AsyncArax_task_waitRaw(::grpc::ClientContext* context, const ::arax::Task& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncArax_task_waitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Arax::Stub::Arax_pipe_get_orphan_vaccel(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::arax::ResourceID* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::arax::ResourceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Arax_pipe_get_orphan_vaccel_, context, request, response);
}

void Arax::Stub::async::Arax_pipe_get_orphan_vaccel(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::arax::ResourceID* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::arax::ResourceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_pipe_get_orphan_vaccel_, context, request, response, std::move(f));
}

void Arax::Stub::async::Arax_pipe_get_orphan_vaccel(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::arax::ResourceID* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_pipe_get_orphan_vaccel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::arax::ResourceID>* Arax::Stub::PrepareAsyncArax_pipe_get_orphan_vaccelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::arax::ResourceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Arax_pipe_get_orphan_vaccel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::arax::ResourceID>* Arax::Stub::AsyncArax_pipe_get_orphan_vaccelRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncArax_pipe_get_orphan_vaccelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Arax::Stub::Arax_pipe_add_orphan_vaccel(::grpc::ClientContext* context, const ::arax::ResourceID& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::arax::ResourceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Arax_pipe_add_orphan_vaccel_, context, request, response);
}

void Arax::Stub::async::Arax_pipe_add_orphan_vaccel(::grpc::ClientContext* context, const ::arax::ResourceID* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::arax::ResourceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_pipe_add_orphan_vaccel_, context, request, response, std::move(f));
}

void Arax::Stub::async::Arax_pipe_add_orphan_vaccel(::grpc::ClientContext* context, const ::arax::ResourceID* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_pipe_add_orphan_vaccel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Arax::Stub::PrepareAsyncArax_pipe_add_orphan_vaccelRaw(::grpc::ClientContext* context, const ::arax::ResourceID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::arax::ResourceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Arax_pipe_add_orphan_vaccel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Arax::Stub::AsyncArax_pipe_add_orphan_vaccelRaw(::grpc::ClientContext* context, const ::arax::ResourceID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncArax_pipe_add_orphan_vaccelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Arax::Stub::Arax_pipe_have_orphan_vaccels(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::arax::Success* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::arax::Success, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Arax_pipe_have_orphan_vaccels_, context, request, response);
}

void Arax::Stub::async::Arax_pipe_have_orphan_vaccels(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::arax::Success* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::arax::Success, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_pipe_have_orphan_vaccels_, context, request, response, std::move(f));
}

void Arax::Stub::async::Arax_pipe_have_orphan_vaccels(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::arax::Success* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_pipe_have_orphan_vaccels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::arax::Success>* Arax::Stub::PrepareAsyncArax_pipe_have_orphan_vaccelsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::arax::Success, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Arax_pipe_have_orphan_vaccels_, context, request);
}

::grpc::ClientAsyncResponseReader< ::arax::Success>* Arax::Stub::AsyncArax_pipe_have_orphan_vaccelsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncArax_pipe_have_orphan_vaccelsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Arax::Stub::Arax_pipe_remove_orphan_vaccel(::grpc::ClientContext* context, const ::arax::ResourceID& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::arax::ResourceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Arax_pipe_remove_orphan_vaccel_, context, request, response);
}

void Arax::Stub::async::Arax_pipe_remove_orphan_vaccel(::grpc::ClientContext* context, const ::arax::ResourceID* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::arax::ResourceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_pipe_remove_orphan_vaccel_, context, request, response, std::move(f));
}

void Arax::Stub::async::Arax_pipe_remove_orphan_vaccel(::grpc::ClientContext* context, const ::arax::ResourceID* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Arax_pipe_remove_orphan_vaccel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Arax::Stub::PrepareAsyncArax_pipe_remove_orphan_vaccelRaw(::grpc::ClientContext* context, const ::arax::ResourceID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::arax::ResourceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Arax_pipe_remove_orphan_vaccel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Arax::Stub::AsyncArax_pipe_remove_orphan_vaccelRaw(::grpc::ClientContext* context, const ::arax::ResourceID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncArax_pipe_remove_orphan_vaccelRaw(context, request, cq);
  result->StartCall();
  return result;
}

Arax::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Arax_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Arax::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Arax::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->Arax_clean(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Arax_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Arax::Service, ::arax::AccelListRequest, ::arax::AccelListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Arax::Service* service,
             ::grpc::ServerContext* ctx,
             const ::arax::AccelListRequest* req,
             ::arax::AccelListResponse* resp) {
               return service->Arax_accel_list(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Arax_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Arax::Service, ::google::protobuf::Empty, ::arax::RevisionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Arax::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::arax::RevisionResponse* resp) {
               return service->Arax_pipe_get_revision(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Arax_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Arax::Service, ::google::protobuf::Empty, ::arax::ProcCounter, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Arax::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::arax::ProcCounter* resp) {
               return service->Arax_pipe_add_process(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Arax_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Arax::Service, ::google::protobuf::Empty, ::arax::ProcCounter, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Arax::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::arax::ProcCounter* resp) {
               return service->Arax_pipe_del_process(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Arax_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Arax::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Arax::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->Arax_accel_list_free(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Arax_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Arax::Service, ::arax::AccelDescriptor, ::arax::AccelListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Arax::Service* service,
             ::grpc::ServerContext* ctx,
             const ::arax::AccelDescriptor* req,
             ::arax::AccelListRequest* resp) {
               return service->Arax_accel_type(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Arax_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Arax::Service, ::arax::RequestBuffer, ::arax::ResourceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Arax::Service* service,
             ::grpc::ServerContext* ctx,
             const ::arax::RequestBuffer* req,
             ::arax::ResourceID* resp) {
               return service->Arax_buffer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Arax_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Arax::Service, ::arax::ProcRequest, ::arax::ResourceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Arax::Service* service,
             ::grpc::ServerContext* ctx,
             const ::arax::ProcRequest* req,
             ::arax::ResourceID* resp) {
               return service->Arax_proc_register(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Arax_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Arax::Service, ::arax::AraxProc, ::arax::ProcCounter, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Arax::Service* service,
             ::grpc::ServerContext* ctx,
             const ::arax::AraxProc* req,
             ::arax::ProcCounter* resp) {
               return service->Arax_proc_put(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Arax_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Arax::Service, ::arax::AccelRequest, ::arax::ResourceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Arax::Service* service,
             ::grpc::ServerContext* ctx,
             const ::arax::AccelRequest* req,
             ::arax::ResourceID* resp) {
               return service->Arax_accel_acquire_type(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Arax_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Arax::Service, ::arax::ResourceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Arax::Service* service,
             ::grpc::ServerContext* ctx,
             const ::arax::ResourceID* req,
             ::google::protobuf::Empty* resp) {
               return service->Arax_accel_release(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Arax_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Arax::Service, ::arax::DataSet, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Arax::Service* service,
             ::grpc::ServerContext* ctx,
             const ::arax::DataSet* req,
             ::google::protobuf::Empty* resp) {
               return service->Arax_data_set(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Arax_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Arax::Service, ::arax::Task, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Arax::Service* service,
             ::grpc::ServerContext* ctx,
             const ::arax::Task* req,
             ::google::protobuf::Empty* resp) {
               return service->Arax_task_free(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Arax_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Arax::Service, ::arax::TaskRequest, ::arax::ResourceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Arax::Service* service,
             ::grpc::ServerContext* ctx,
             const ::arax::TaskRequest* req,
             ::arax::ResourceID* resp) {
               return service->Arax_task_issue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Arax_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Arax::Service, ::arax::Task, ::arax::Task, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Arax::Service* service,
             ::grpc::ServerContext* ctx,
             const ::arax::Task* req,
             ::arax::Task* resp) {
               return service->Arax_task_wait(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Arax_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Arax::Service, ::google::protobuf::Empty, ::arax::ResourceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Arax::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::arax::ResourceID* resp) {
               return service->Arax_pipe_get_orphan_vaccel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Arax_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Arax::Service, ::arax::ResourceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Arax::Service* service,
             ::grpc::ServerContext* ctx,
             const ::arax::ResourceID* req,
             ::google::protobuf::Empty* resp) {
               return service->Arax_pipe_add_orphan_vaccel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Arax_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Arax::Service, ::google::protobuf::Empty, ::arax::Success, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Arax::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::arax::Success* resp) {
               return service->Arax_pipe_have_orphan_vaccels(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Arax_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Arax::Service, ::arax::ResourceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Arax::Service* service,
             ::grpc::ServerContext* ctx,
             const ::arax::ResourceID* req,
             ::google::protobuf::Empty* resp) {
               return service->Arax_pipe_remove_orphan_vaccel(ctx, req, resp);
             }, this)));
}

Arax::Service::~Service() {
}

::grpc::Status Arax::Service::Arax_clean(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Arax::Service::Arax_accel_list(::grpc::ServerContext* context, const ::arax::AccelListRequest* request, ::arax::AccelListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Arax::Service::Arax_pipe_get_revision(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::arax::RevisionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Arax::Service::Arax_pipe_add_process(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::arax::ProcCounter* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Arax::Service::Arax_pipe_del_process(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::arax::ProcCounter* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Arax::Service::Arax_accel_list_free(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Arax::Service::Arax_accel_type(::grpc::ServerContext* context, const ::arax::AccelDescriptor* request, ::arax::AccelListRequest* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Arax::Service::Arax_buffer(::grpc::ServerContext* context, const ::arax::RequestBuffer* request, ::arax::ResourceID* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Arax::Service::Arax_proc_register(::grpc::ServerContext* context, const ::arax::ProcRequest* request, ::arax::ResourceID* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Arax::Service::Arax_proc_put(::grpc::ServerContext* context, const ::arax::AraxProc* request, ::arax::ProcCounter* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Arax::Service::Arax_accel_acquire_type(::grpc::ServerContext* context, const ::arax::AccelRequest* request, ::arax::ResourceID* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Arax::Service::Arax_accel_release(::grpc::ServerContext* context, const ::arax::ResourceID* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Arax::Service::Arax_data_set(::grpc::ServerContext* context, const ::arax::DataSet* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Arax::Service::Arax_task_free(::grpc::ServerContext* context, const ::arax::Task* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Arax::Service::Arax_task_issue(::grpc::ServerContext* context, const ::arax::TaskRequest* request, ::arax::ResourceID* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Arax::Service::Arax_task_wait(::grpc::ServerContext* context, const ::arax::Task* request, ::arax::Task* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Arax::Service::Arax_pipe_get_orphan_vaccel(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::arax::ResourceID* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Arax::Service::Arax_pipe_add_orphan_vaccel(::grpc::ServerContext* context, const ::arax::ResourceID* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Arax::Service::Arax_pipe_have_orphan_vaccels(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::arax::Success* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Arax::Service::Arax_pipe_remove_orphan_vaccel(::grpc::ServerContext* context, const ::arax::ResourceID* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace arax

