// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arax.proto

#include "arax.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace arax {
PROTOBUF_CONSTEXPR Success::Success(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SuccessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SuccessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SuccessDefaultTypeInternal() {}
  union {
    Success _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SuccessDefaultTypeInternal _Success_default_instance_;
PROTOBUF_CONSTEXPR ResourceID::ResourceID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResourceIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceIDDefaultTypeInternal() {}
  union {
    ResourceID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceIDDefaultTypeInternal _ResourceID_default_instance_;
PROTOBUF_CONSTEXPR TaskRequest::TaskRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accel_)*/uint64_t{0u}
  , /*decltype(_impl_.proc_)*/uint64_t{0u}
  , /*decltype(_impl_.in_buffer_)*/uint64_t{0u}
  , /*decltype(_impl_.in_count_)*/0u
  , /*decltype(_impl_.out_count_)*/0u
  , /*decltype(_impl_.out_buffer_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskRequestDefaultTypeInternal() {}
  union {
    TaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskRequestDefaultTypeInternal _TaskRequest_default_instance_;
PROTOBUF_CONSTEXPR Task::Task(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.task_id_)*/uint64_t{0u}
  , /*decltype(_impl_.task_state_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskDefaultTypeInternal() {}
  union {
    Task _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskDefaultTypeInternal _Task_default_instance_;
PROTOBUF_CONSTEXPR DataSet::DataSet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.str_val_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.buffer_)*/uint64_t{0u}
  , /*decltype(_impl_.accel_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataSetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataSetDefaultTypeInternal() {}
  union {
    DataSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataSetDefaultTypeInternal _DataSet_default_instance_;
PROTOBUF_CONSTEXPR AccelRequest::AccelRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AccelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccelRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccelRequestDefaultTypeInternal() {}
  union {
    AccelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccelRequestDefaultTypeInternal _AccelRequest_default_instance_;
PROTOBUF_CONSTEXPR AraxProc::AraxProc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AraxProcDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AraxProcDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AraxProcDefaultTypeInternal() {}
  union {
    AraxProc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AraxProcDefaultTypeInternal _AraxProc_default_instance_;
PROTOBUF_CONSTEXPR ProcRequest::ProcRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.func_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcRequestDefaultTypeInternal() {}
  union {
    ProcRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcRequestDefaultTypeInternal _ProcRequest_default_instance_;
PROTOBUF_CONSTEXPR RequestBuffer::RequestBuffer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.buffer_size_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestBufferDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestBufferDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestBufferDefaultTypeInternal() {}
  union {
    RequestBuffer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestBufferDefaultTypeInternal _RequestBuffer_default_instance_;
PROTOBUF_CONSTEXPR ProcCounter::ProcCounter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.proc_counter_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcCounterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcCounterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcCounterDefaultTypeInternal() {}
  union {
    ProcCounter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcCounterDefaultTypeInternal _ProcCounter_default_instance_;
PROTOBUF_CONSTEXPR AccelDescriptor::AccelDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AccelDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccelDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccelDescriptorDefaultTypeInternal() {}
  union {
    AccelDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccelDescriptorDefaultTypeInternal _AccelDescriptor_default_instance_;
PROTOBUF_CONSTEXPR RevisionResponse::RevisionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.revision_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RevisionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RevisionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RevisionResponseDefaultTypeInternal() {}
  union {
    RevisionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RevisionResponseDefaultTypeInternal _RevisionResponse_default_instance_;
PROTOBUF_CONSTEXPR AccelListRequest::AccelListRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.physical_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AccelListRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccelListRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccelListRequestDefaultTypeInternal() {}
  union {
    AccelListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccelListRequestDefaultTypeInternal _AccelListRequest_default_instance_;
PROTOBUF_CONSTEXPR AccelListResponse::AccelListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.descriptors_)*/{}
  , /*decltype(_impl_.accel_num_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AccelListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccelListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccelListResponseDefaultTypeInternal() {}
  union {
    AccelListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccelListResponseDefaultTypeInternal _AccelListResponse_default_instance_;
}  // namespace arax
static ::_pb::Metadata file_level_metadata_arax_2eproto[14];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_arax_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_arax_2eproto = nullptr;

const uint32_t TableStruct_arax_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arax::Success, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arax::Success, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arax::ResourceID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arax::ResourceID, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arax::TaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arax::TaskRequest, _impl_.accel_),
  PROTOBUF_FIELD_OFFSET(::arax::TaskRequest, _impl_.proc_),
  PROTOBUF_FIELD_OFFSET(::arax::TaskRequest, _impl_.in_count_),
  PROTOBUF_FIELD_OFFSET(::arax::TaskRequest, _impl_.in_buffer_),
  PROTOBUF_FIELD_OFFSET(::arax::TaskRequest, _impl_.out_count_),
  PROTOBUF_FIELD_OFFSET(::arax::TaskRequest, _impl_.out_buffer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arax::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arax::Task, _impl_.task_id_),
  PROTOBUF_FIELD_OFFSET(::arax::Task, _impl_.task_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arax::DataSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arax::DataSet, _impl_.buffer_),
  PROTOBUF_FIELD_OFFSET(::arax::DataSet, _impl_.accel_),
  PROTOBUF_FIELD_OFFSET(::arax::DataSet, _impl_.str_val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arax::AccelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arax::AccelRequest, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arax::AraxProc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arax::AraxProc, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arax::ProcRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arax::ProcRequest, _impl_.func_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arax::RequestBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arax::RequestBuffer, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::arax::RequestBuffer, _impl_.buffer_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arax::ProcCounter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arax::ProcCounter, _impl_.proc_counter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arax::AccelDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arax::AccelDescriptor, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::arax::AccelDescriptor, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arax::RevisionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arax::RevisionResponse, _impl_.revision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arax::AccelListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arax::AccelListRequest, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::arax::AccelListRequest, _impl_.physical_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::arax::AccelListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::arax::AccelListResponse, _impl_.accel_num_),
  PROTOBUF_FIELD_OFFSET(::arax::AccelListResponse, _impl_.descriptors_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::arax::Success)},
  { 7, -1, -1, sizeof(::arax::ResourceID)},
  { 14, -1, -1, sizeof(::arax::TaskRequest)},
  { 26, -1, -1, sizeof(::arax::Task)},
  { 34, -1, -1, sizeof(::arax::DataSet)},
  { 43, -1, -1, sizeof(::arax::AccelRequest)},
  { 50, -1, -1, sizeof(::arax::AraxProc)},
  { 57, -1, -1, sizeof(::arax::ProcRequest)},
  { 64, -1, -1, sizeof(::arax::RequestBuffer)},
  { 72, -1, -1, sizeof(::arax::ProcCounter)},
  { 79, -1, -1, sizeof(::arax::AccelDescriptor)},
  { 87, -1, -1, sizeof(::arax::RevisionResponse)},
  { 94, -1, -1, sizeof(::arax::AccelListRequest)},
  { 102, -1, -1, sizeof(::arax::AccelListResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::arax::_Success_default_instance_._instance,
  &::arax::_ResourceID_default_instance_._instance,
  &::arax::_TaskRequest_default_instance_._instance,
  &::arax::_Task_default_instance_._instance,
  &::arax::_DataSet_default_instance_._instance,
  &::arax::_AccelRequest_default_instance_._instance,
  &::arax::_AraxProc_default_instance_._instance,
  &::arax::_ProcRequest_default_instance_._instance,
  &::arax::_RequestBuffer_default_instance_._instance,
  &::arax::_ProcCounter_default_instance_._instance,
  &::arax::_AccelDescriptor_default_instance_._instance,
  &::arax::_RevisionResponse_default_instance_._instance,
  &::arax::_AccelListRequest_default_instance_._instance,
  &::arax::_AccelListResponse_default_instance_._instance,
};

const char descriptor_table_protodef_arax_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\narax.proto\022\004arax\032\033google/protobuf/empt"
  "y.proto\"\032\n\007Success\022\017\n\007success\030\001 \001(\010\"\030\n\nR"
  "esourceID\022\n\n\002id\030\001 \001(\004\"v\n\013TaskRequest\022\r\n\005"
  "accel\030\001 \001(\004\022\014\n\004proc\030\002 \001(\004\022\020\n\010in_count\030\003 "
  "\001(\r\022\021\n\tin_buffer\030\004 \001(\004\022\021\n\tout_count\030\005 \001("
  "\r\022\022\n\nout_buffer\030\006 \001(\004\"+\n\004Task\022\017\n\007task_id"
  "\030\001 \001(\004\022\022\n\ntask_state\030\002 \001(\r\"9\n\007DataSet\022\016\n"
  "\006buffer\030\001 \001(\004\022\r\n\005accel\030\002 \001(\004\022\017\n\007str_val\030"
  "\003 \001(\t\"\034\n\014AccelRequest\022\014\n\004type\030\001 \001(\r\"\026\n\010A"
  "raxProc\022\n\n\002id\030\001 \001(\004\" \n\013ProcRequest\022\021\n\tfu"
  "nc_name\030\002 \001(\t\"0\n\rRequestBuffer\022\n\n\002id\030\001 \001"
  "(\004\022\023\n\013buffer_size\030\002 \001(\004\"#\n\013ProcCounter\022\024"
  "\n\014proc_counter\030\001 \001(\r\".\n\017AccelDescriptor\022"
  "\r\n\005index\030\001 \001(\005\022\014\n\004type\030\002 \001(\t\"$\n\020Revision"
  "Response\022\020\n\010revision\030\001 \001(\t\"2\n\020AccelListR"
  "equest\022\014\n\004type\030\001 \001(\005\022\020\n\010physical\030\002 \001(\010\"R"
  "\n\021AccelListResponse\022\021\n\taccel_num\030\001 \001(\004\022*"
  "\n\013descriptors\030\002 \003(\0132\025.arax.AccelDescript"
  "or2\250\n\n\004Arax\022>\n\nArax_clean\022\026.google.proto"
  "buf.Empty\032\026.google.protobuf.Empty\"\000\022D\n\017A"
  "rax_accel_list\022\026.arax.AccelListRequest\032\027"
  ".arax.AccelListResponse\"\000\022J\n\026Arax_pipe_g"
  "et_revision\022\026.google.protobuf.Empty\032\026.ar"
  "ax.RevisionResponse\"\000\022D\n\025Arax_pipe_add_p"
  "rocess\022\026.google.protobuf.Empty\032\021.arax.Pr"
  "ocCounter\"\000\022D\n\025Arax_pipe_del_process\022\026.g"
  "oogle.protobuf.Empty\032\021.arax.ProcCounter\""
  "\000\022H\n\024Arax_accel_list_free\022\026.google.proto"
  "buf.Empty\032\026.google.protobuf.Empty\"\000\022B\n\017A"
  "rax_accel_type\022\025.arax.AccelDescriptor\032\026."
  "arax.AccelListRequest\"\000\0226\n\013Arax_buffer\022\023"
  ".arax.RequestBuffer\032\020.arax.ResourceID\"\000\022"
  ";\n\022Arax_proc_register\022\021.arax.ProcRequest"
  "\032\020.arax.ResourceID\"\000\0224\n\rArax_proc_put\022\016."
  "arax.AraxProc\032\021.arax.ProcCounter\"\000\022A\n\027Ar"
  "ax_accel_acquire_type\022\022.arax.AccelReques"
  "t\032\020.arax.ResourceID\"\000\022@\n\022Arax_accel_rele"
  "ase\022\020.arax.ResourceID\032\026.google.protobuf."
  "Empty\"\000\0228\n\rArax_data_set\022\r.arax.DataSet\032"
  "\026.google.protobuf.Empty\"\000\0226\n\016Arax_task_f"
  "ree\022\n.arax.Task\032\026.google.protobuf.Empty\""
  "\000\0228\n\017Arax_task_issue\022\021.arax.TaskRequest\032"
  "\020.arax.ResourceID\"\000\022*\n\016Arax_task_wait\022\n."
  "arax.Task\032\n.arax.Task\"\000\022I\n\033Arax_pipe_get"
  "_orphan_vaccel\022\026.google.protobuf.Empty\032\020"
  ".arax.ResourceID\"\000\022I\n\033Arax_pipe_add_orph"
  "an_vaccel\022\020.arax.ResourceID\032\026.google.pro"
  "tobuf.Empty\"\000\022H\n\035Arax_pipe_have_orphan_v"
  "accels\022\026.google.protobuf.Empty\032\r.arax.Su"
  "ccess\"\000\022L\n\036Arax_pipe_remove_orphan_vacce"
  "l\022\020.arax.ResourceID\032\026.google.protobuf.Em"
  "pty\"\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_arax_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::_pbi::once_flag descriptor_table_arax_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_arax_2eproto = {
    false, false, 2053, descriptor_table_protodef_arax_2eproto,
    "arax.proto",
    &descriptor_table_arax_2eproto_once, descriptor_table_arax_2eproto_deps, 1, 14,
    schemas, file_default_instances, TableStruct_arax_2eproto::offsets,
    file_level_metadata_arax_2eproto, file_level_enum_descriptors_arax_2eproto,
    file_level_service_descriptors_arax_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_arax_2eproto_getter() {
  return &descriptor_table_arax_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_arax_2eproto(&descriptor_table_arax_2eproto);
namespace arax {

// ===================================================================

class Success::_Internal {
 public:
};

Success::Success(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arax.Success)
}
Success::Success(const Success& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Success* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:arax.Success)
}

inline void Success::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Success::~Success() {
  // @@protoc_insertion_point(destructor:arax.Success)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Success::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Success::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Success::Clear() {
// @@protoc_insertion_point(message_clear_start:arax.Success)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Success::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Success::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arax.Success)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arax.Success)
  return target;
}

size_t Success::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arax.Success)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Success::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Success::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Success::GetClassData() const { return &_class_data_; }


void Success::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Success*>(&to_msg);
  auto& from = static_cast<const Success&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arax.Success)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Success::CopyFrom(const Success& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arax.Success)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Success::IsInitialized() const {
  return true;
}

void Success::InternalSwap(Success* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Success::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_arax_2eproto_getter, &descriptor_table_arax_2eproto_once,
      file_level_metadata_arax_2eproto[0]);
}

// ===================================================================

class ResourceID::_Internal {
 public:
};

ResourceID::ResourceID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arax.ResourceID)
}
ResourceID::ResourceID(const ResourceID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResourceID* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:arax.ResourceID)
}

inline void ResourceID::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResourceID::~ResourceID() {
  // @@protoc_insertion_point(destructor:arax.ResourceID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResourceID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResourceID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResourceID::Clear() {
// @@protoc_insertion_point(message_clear_start:arax.ResourceID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResourceID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arax.ResourceID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arax.ResourceID)
  return target;
}

size_t ResourceID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arax.ResourceID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResourceID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceID::GetClassData() const { return &_class_data_; }


void ResourceID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResourceID*>(&to_msg);
  auto& from = static_cast<const ResourceID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arax.ResourceID)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceID::CopyFrom(const ResourceID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arax.ResourceID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceID::IsInitialized() const {
  return true;
}

void ResourceID::InternalSwap(ResourceID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_arax_2eproto_getter, &descriptor_table_arax_2eproto_once,
      file_level_metadata_arax_2eproto[1]);
}

// ===================================================================

class TaskRequest::_Internal {
 public:
};

TaskRequest::TaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arax.TaskRequest)
}
TaskRequest::TaskRequest(const TaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accel_){}
    , decltype(_impl_.proc_){}
    , decltype(_impl_.in_buffer_){}
    , decltype(_impl_.in_count_){}
    , decltype(_impl_.out_count_){}
    , decltype(_impl_.out_buffer_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.accel_, &from._impl_.accel_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.out_buffer_) -
    reinterpret_cast<char*>(&_impl_.accel_)) + sizeof(_impl_.out_buffer_));
  // @@protoc_insertion_point(copy_constructor:arax.TaskRequest)
}

inline void TaskRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accel_){uint64_t{0u}}
    , decltype(_impl_.proc_){uint64_t{0u}}
    , decltype(_impl_.in_buffer_){uint64_t{0u}}
    , decltype(_impl_.in_count_){0u}
    , decltype(_impl_.out_count_){0u}
    , decltype(_impl_.out_buffer_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TaskRequest::~TaskRequest() {
  // @@protoc_insertion_point(destructor:arax.TaskRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TaskRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:arax.TaskRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.accel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.out_buffer_) -
      reinterpret_cast<char*>(&_impl_.accel_)) + sizeof(_impl_.out_buffer_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 accel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.accel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 proc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.proc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 in_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.in_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 in_buffer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.in_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 out_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.out_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 out_buffer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.out_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arax.TaskRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 accel = 1;
  if (this->_internal_accel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_accel(), target);
  }

  // uint64 proc = 2;
  if (this->_internal_proc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_proc(), target);
  }

  // uint32 in_count = 3;
  if (this->_internal_in_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_in_count(), target);
  }

  // uint64 in_buffer = 4;
  if (this->_internal_in_buffer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_in_buffer(), target);
  }

  // uint32 out_count = 5;
  if (this->_internal_out_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_out_count(), target);
  }

  // uint64 out_buffer = 6;
  if (this->_internal_out_buffer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_out_buffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arax.TaskRequest)
  return target;
}

size_t TaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arax.TaskRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 accel = 1;
  if (this->_internal_accel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_accel());
  }

  // uint64 proc = 2;
  if (this->_internal_proc() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_proc());
  }

  // uint64 in_buffer = 4;
  if (this->_internal_in_buffer() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_in_buffer());
  }

  // uint32 in_count = 3;
  if (this->_internal_in_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_in_count());
  }

  // uint32 out_count = 5;
  if (this->_internal_out_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_out_count());
  }

  // uint64 out_buffer = 6;
  if (this->_internal_out_buffer() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_out_buffer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskRequest::GetClassData() const { return &_class_data_; }


void TaskRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskRequest*>(&to_msg);
  auto& from = static_cast<const TaskRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arax.TaskRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_accel() != 0) {
    _this->_internal_set_accel(from._internal_accel());
  }
  if (from._internal_proc() != 0) {
    _this->_internal_set_proc(from._internal_proc());
  }
  if (from._internal_in_buffer() != 0) {
    _this->_internal_set_in_buffer(from._internal_in_buffer());
  }
  if (from._internal_in_count() != 0) {
    _this->_internal_set_in_count(from._internal_in_count());
  }
  if (from._internal_out_count() != 0) {
    _this->_internal_set_out_count(from._internal_out_count());
  }
  if (from._internal_out_buffer() != 0) {
    _this->_internal_set_out_buffer(from._internal_out_buffer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskRequest::CopyFrom(const TaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arax.TaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRequest::IsInitialized() const {
  return true;
}

void TaskRequest::InternalSwap(TaskRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskRequest, _impl_.out_buffer_)
      + sizeof(TaskRequest::_impl_.out_buffer_)
      - PROTOBUF_FIELD_OFFSET(TaskRequest, _impl_.accel_)>(
          reinterpret_cast<char*>(&_impl_.accel_),
          reinterpret_cast<char*>(&other->_impl_.accel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_arax_2eproto_getter, &descriptor_table_arax_2eproto_once,
      file_level_metadata_arax_2eproto[2]);
}

// ===================================================================

class Task::_Internal {
 public:
};

Task::Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arax.Task)
}
Task::Task(const Task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Task* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , decltype(_impl_.task_state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.task_id_, &from._impl_.task_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.task_state_) -
    reinterpret_cast<char*>(&_impl_.task_id_)) + sizeof(_impl_.task_state_));
  // @@protoc_insertion_point(copy_constructor:arax.Task)
}

inline void Task::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){uint64_t{0u}}
    , decltype(_impl_.task_state_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:arax.Task)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Task::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Task::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:arax.Task)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.task_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.task_state_) -
      reinterpret_cast<char*>(&_impl_.task_id_)) + sizeof(_impl_.task_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Task::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 task_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.task_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Task::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arax.Task)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 task_id = 1;
  if (this->_internal_task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_task_id(), target);
  }

  // uint32 task_state = 2;
  if (this->_internal_task_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_task_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arax.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arax.Task)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 task_id = 1;
  if (this->_internal_task_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_task_id());
  }

  // uint32 task_state = 2;
  if (this->_internal_task_state() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_task_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Task::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Task::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Task::GetClassData() const { return &_class_data_; }


void Task::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Task*>(&to_msg);
  auto& from = static_cast<const Task&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arax.Task)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_task_id() != 0) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (from._internal_task_state() != 0) {
    _this->_internal_set_task_state(from._internal_task_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arax.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::InternalSwap(Task* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Task, _impl_.task_state_)
      + sizeof(Task::_impl_.task_state_)
      - PROTOBUF_FIELD_OFFSET(Task, _impl_.task_id_)>(
          reinterpret_cast<char*>(&_impl_.task_id_),
          reinterpret_cast<char*>(&other->_impl_.task_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Task::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_arax_2eproto_getter, &descriptor_table_arax_2eproto_once,
      file_level_metadata_arax_2eproto[3]);
}

// ===================================================================

class DataSet::_Internal {
 public:
};

DataSet::DataSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arax.DataSet)
}
DataSet::DataSet(const DataSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataSet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.str_val_){}
    , decltype(_impl_.buffer_){}
    , decltype(_impl_.accel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.str_val_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.str_val_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_str_val().empty()) {
    _this->_impl_.str_val_.Set(from._internal_str_val(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.buffer_, &from._impl_.buffer_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.accel_) -
    reinterpret_cast<char*>(&_impl_.buffer_)) + sizeof(_impl_.accel_));
  // @@protoc_insertion_point(copy_constructor:arax.DataSet)
}

inline void DataSet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.str_val_){}
    , decltype(_impl_.buffer_){uint64_t{0u}}
    , decltype(_impl_.accel_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.str_val_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.str_val_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataSet::~DataSet() {
  // @@protoc_insertion_point(destructor:arax.DataSet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.str_val_.Destroy();
}

void DataSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataSet::Clear() {
// @@protoc_insertion_point(message_clear_start:arax.DataSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.str_val_.ClearToEmpty();
  ::memset(&_impl_.buffer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.accel_) -
      reinterpret_cast<char*>(&_impl_.buffer_)) + sizeof(_impl_.accel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataSet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 buffer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 accel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.accel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string str_val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_str_val();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "arax.DataSet.str_val"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arax.DataSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 buffer = 1;
  if (this->_internal_buffer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_buffer(), target);
  }

  // uint64 accel = 2;
  if (this->_internal_accel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_accel(), target);
  }

  // string str_val = 3;
  if (!this->_internal_str_val().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str_val().data(), static_cast<int>(this->_internal_str_val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "arax.DataSet.str_val");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_str_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arax.DataSet)
  return target;
}

size_t DataSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arax.DataSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string str_val = 3;
  if (!this->_internal_str_val().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str_val());
  }

  // uint64 buffer = 1;
  if (this->_internal_buffer() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_buffer());
  }

  // uint64 accel = 2;
  if (this->_internal_accel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_accel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataSet::GetClassData() const { return &_class_data_; }


void DataSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataSet*>(&to_msg);
  auto& from = static_cast<const DataSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arax.DataSet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_str_val().empty()) {
    _this->_internal_set_str_val(from._internal_str_val());
  }
  if (from._internal_buffer() != 0) {
    _this->_internal_set_buffer(from._internal_buffer());
  }
  if (from._internal_accel() != 0) {
    _this->_internal_set_accel(from._internal_accel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataSet::CopyFrom(const DataSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arax.DataSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSet::IsInitialized() const {
  return true;
}

void DataSet::InternalSwap(DataSet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.str_val_, lhs_arena,
      &other->_impl_.str_val_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataSet, _impl_.accel_)
      + sizeof(DataSet::_impl_.accel_)
      - PROTOBUF_FIELD_OFFSET(DataSet, _impl_.buffer_)>(
          reinterpret_cast<char*>(&_impl_.buffer_),
          reinterpret_cast<char*>(&other->_impl_.buffer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_arax_2eproto_getter, &descriptor_table_arax_2eproto_once,
      file_level_metadata_arax_2eproto[4]);
}

// ===================================================================

class AccelRequest::_Internal {
 public:
};

AccelRequest::AccelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arax.AccelRequest)
}
AccelRequest::AccelRequest(const AccelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccelRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:arax.AccelRequest)
}

inline void AccelRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AccelRequest::~AccelRequest() {
  // @@protoc_insertion_point(destructor:arax.AccelRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AccelRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:arax.AccelRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccelRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccelRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arax.AccelRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arax.AccelRequest)
  return target;
}

size_t AccelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arax.AccelRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccelRequest::GetClassData() const { return &_class_data_; }


void AccelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccelRequest*>(&to_msg);
  auto& from = static_cast<const AccelRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arax.AccelRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccelRequest::CopyFrom(const AccelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arax.AccelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccelRequest::IsInitialized() const {
  return true;
}

void AccelRequest::InternalSwap(AccelRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_arax_2eproto_getter, &descriptor_table_arax_2eproto_once,
      file_level_metadata_arax_2eproto[5]);
}

// ===================================================================

class AraxProc::_Internal {
 public:
};

AraxProc::AraxProc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arax.AraxProc)
}
AraxProc::AraxProc(const AraxProc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AraxProc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:arax.AraxProc)
}

inline void AraxProc::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AraxProc::~AraxProc() {
  // @@protoc_insertion_point(destructor:arax.AraxProc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AraxProc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AraxProc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AraxProc::Clear() {
// @@protoc_insertion_point(message_clear_start:arax.AraxProc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AraxProc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AraxProc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arax.AraxProc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arax.AraxProc)
  return target;
}

size_t AraxProc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arax.AraxProc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AraxProc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AraxProc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AraxProc::GetClassData() const { return &_class_data_; }


void AraxProc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AraxProc*>(&to_msg);
  auto& from = static_cast<const AraxProc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arax.AraxProc)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AraxProc::CopyFrom(const AraxProc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arax.AraxProc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AraxProc::IsInitialized() const {
  return true;
}

void AraxProc::InternalSwap(AraxProc* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AraxProc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_arax_2eproto_getter, &descriptor_table_arax_2eproto_once,
      file_level_metadata_arax_2eproto[6]);
}

// ===================================================================

class ProcRequest::_Internal {
 public:
};

ProcRequest::ProcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arax.ProcRequest)
}
ProcRequest::ProcRequest(const ProcRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.func_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.func_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.func_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_func_name().empty()) {
    _this->_impl_.func_name_.Set(from._internal_func_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:arax.ProcRequest)
}

inline void ProcRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.func_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.func_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.func_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProcRequest::~ProcRequest() {
  // @@protoc_insertion_point(destructor:arax.ProcRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.func_name_.Destroy();
}

void ProcRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:arax.ProcRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.func_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string func_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_func_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "arax.ProcRequest.func_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arax.ProcRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string func_name = 2;
  if (!this->_internal_func_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_func_name().data(), static_cast<int>(this->_internal_func_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "arax.ProcRequest.func_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_func_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arax.ProcRequest)
  return target;
}

size_t ProcRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arax.ProcRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string func_name = 2;
  if (!this->_internal_func_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_func_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcRequest::GetClassData() const { return &_class_data_; }


void ProcRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcRequest*>(&to_msg);
  auto& from = static_cast<const ProcRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arax.ProcRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_func_name().empty()) {
    _this->_internal_set_func_name(from._internal_func_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcRequest::CopyFrom(const ProcRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arax.ProcRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcRequest::IsInitialized() const {
  return true;
}

void ProcRequest::InternalSwap(ProcRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.func_name_, lhs_arena,
      &other->_impl_.func_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_arax_2eproto_getter, &descriptor_table_arax_2eproto_once,
      file_level_metadata_arax_2eproto[7]);
}

// ===================================================================

class RequestBuffer::_Internal {
 public:
};

RequestBuffer::RequestBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arax.RequestBuffer)
}
RequestBuffer::RequestBuffer(const RequestBuffer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestBuffer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.buffer_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.buffer_size_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.buffer_size_));
  // @@protoc_insertion_point(copy_constructor:arax.RequestBuffer)
}

inline void RequestBuffer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.buffer_size_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RequestBuffer::~RequestBuffer() {
  // @@protoc_insertion_point(destructor:arax.RequestBuffer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestBuffer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestBuffer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:arax.RequestBuffer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.buffer_size_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.buffer_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestBuffer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 buffer_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestBuffer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arax.RequestBuffer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 buffer_size = 2;
  if (this->_internal_buffer_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_buffer_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arax.RequestBuffer)
  return target;
}

size_t RequestBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arax.RequestBuffer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint64 buffer_size = 2;
  if (this->_internal_buffer_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_buffer_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestBuffer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestBuffer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestBuffer::GetClassData() const { return &_class_data_; }


void RequestBuffer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestBuffer*>(&to_msg);
  auto& from = static_cast<const RequestBuffer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arax.RequestBuffer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_buffer_size() != 0) {
    _this->_internal_set_buffer_size(from._internal_buffer_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestBuffer::CopyFrom(const RequestBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arax.RequestBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBuffer::IsInitialized() const {
  return true;
}

void RequestBuffer::InternalSwap(RequestBuffer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestBuffer, _impl_.buffer_size_)
      + sizeof(RequestBuffer::_impl_.buffer_size_)
      - PROTOBUF_FIELD_OFFSET(RequestBuffer, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestBuffer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_arax_2eproto_getter, &descriptor_table_arax_2eproto_once,
      file_level_metadata_arax_2eproto[8]);
}

// ===================================================================

class ProcCounter::_Internal {
 public:
};

ProcCounter::ProcCounter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arax.ProcCounter)
}
ProcCounter::ProcCounter(const ProcCounter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcCounter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.proc_counter_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.proc_counter_ = from._impl_.proc_counter_;
  // @@protoc_insertion_point(copy_constructor:arax.ProcCounter)
}

inline void ProcCounter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.proc_counter_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProcCounter::~ProcCounter() {
  // @@protoc_insertion_point(destructor:arax.ProcCounter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcCounter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProcCounter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcCounter::Clear() {
// @@protoc_insertion_point(message_clear_start:arax.ProcCounter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proc_counter_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcCounter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 proc_counter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.proc_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcCounter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arax.ProcCounter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 proc_counter = 1;
  if (this->_internal_proc_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_proc_counter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arax.ProcCounter)
  return target;
}

size_t ProcCounter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arax.ProcCounter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 proc_counter = 1;
  if (this->_internal_proc_counter() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_proc_counter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcCounter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcCounter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcCounter::GetClassData() const { return &_class_data_; }


void ProcCounter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcCounter*>(&to_msg);
  auto& from = static_cast<const ProcCounter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arax.ProcCounter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_proc_counter() != 0) {
    _this->_internal_set_proc_counter(from._internal_proc_counter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcCounter::CopyFrom(const ProcCounter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arax.ProcCounter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcCounter::IsInitialized() const {
  return true;
}

void ProcCounter::InternalSwap(ProcCounter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.proc_counter_, other->_impl_.proc_counter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcCounter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_arax_2eproto_getter, &descriptor_table_arax_2eproto_once,
      file_level_metadata_arax_2eproto[9]);
}

// ===================================================================

class AccelDescriptor::_Internal {
 public:
};

AccelDescriptor::AccelDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arax.AccelDescriptor)
}
AccelDescriptor::AccelDescriptor(const AccelDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccelDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:arax.AccelDescriptor)
}

inline void AccelDescriptor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AccelDescriptor::~AccelDescriptor() {
  // @@protoc_insertion_point(destructor:arax.AccelDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccelDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
}

void AccelDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccelDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:arax.AccelDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccelDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "arax.AccelDescriptor.type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccelDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arax.AccelDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "arax.AccelDescriptor.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arax.AccelDescriptor)
  return target;
}

size_t AccelDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arax.AccelDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccelDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccelDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccelDescriptor::GetClassData() const { return &_class_data_; }


void AccelDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccelDescriptor*>(&to_msg);
  auto& from = static_cast<const AccelDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arax.AccelDescriptor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccelDescriptor::CopyFrom(const AccelDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arax.AccelDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccelDescriptor::IsInitialized() const {
  return true;
}

void AccelDescriptor::InternalSwap(AccelDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccelDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_arax_2eproto_getter, &descriptor_table_arax_2eproto_once,
      file_level_metadata_arax_2eproto[10]);
}

// ===================================================================

class RevisionResponse::_Internal {
 public:
};

RevisionResponse::RevisionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arax.RevisionResponse)
}
RevisionResponse::RevisionResponse(const RevisionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RevisionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.revision_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.revision_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.revision_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_revision().empty()) {
    _this->_impl_.revision_.Set(from._internal_revision(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:arax.RevisionResponse)
}

inline void RevisionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.revision_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.revision_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.revision_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RevisionResponse::~RevisionResponse() {
  // @@protoc_insertion_point(destructor:arax.RevisionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RevisionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.revision_.Destroy();
}

void RevisionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RevisionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:arax.RevisionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.revision_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RevisionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string revision = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_revision();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "arax.RevisionResponse.revision"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RevisionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arax.RevisionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string revision = 1;
  if (!this->_internal_revision().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_revision().data(), static_cast<int>(this->_internal_revision().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "arax.RevisionResponse.revision");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_revision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arax.RevisionResponse)
  return target;
}

size_t RevisionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arax.RevisionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string revision = 1;
  if (!this->_internal_revision().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_revision());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RevisionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RevisionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RevisionResponse::GetClassData() const { return &_class_data_; }


void RevisionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RevisionResponse*>(&to_msg);
  auto& from = static_cast<const RevisionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arax.RevisionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_revision().empty()) {
    _this->_internal_set_revision(from._internal_revision());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RevisionResponse::CopyFrom(const RevisionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arax.RevisionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevisionResponse::IsInitialized() const {
  return true;
}

void RevisionResponse::InternalSwap(RevisionResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.revision_, lhs_arena,
      &other->_impl_.revision_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RevisionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_arax_2eproto_getter, &descriptor_table_arax_2eproto_once,
      file_level_metadata_arax_2eproto[11]);
}

// ===================================================================

class AccelListRequest::_Internal {
 public:
};

AccelListRequest::AccelListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arax.AccelListRequest)
}
AccelListRequest::AccelListRequest(const AccelListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccelListRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.physical_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.physical_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.physical_));
  // @@protoc_insertion_point(copy_constructor:arax.AccelListRequest)
}

inline void AccelListRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.physical_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AccelListRequest::~AccelListRequest() {
  // @@protoc_insertion_point(destructor:arax.AccelListRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccelListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AccelListRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccelListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:arax.AccelListRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.physical_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.physical_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccelListRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool physical = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.physical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccelListRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arax.AccelListRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // bool physical = 2;
  if (this->_internal_physical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_physical(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arax.AccelListRequest)
  return target;
}

size_t AccelListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arax.AccelListRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // bool physical = 2;
  if (this->_internal_physical() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccelListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccelListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccelListRequest::GetClassData() const { return &_class_data_; }


void AccelListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccelListRequest*>(&to_msg);
  auto& from = static_cast<const AccelListRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arax.AccelListRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_physical() != 0) {
    _this->_internal_set_physical(from._internal_physical());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccelListRequest::CopyFrom(const AccelListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arax.AccelListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccelListRequest::IsInitialized() const {
  return true;
}

void AccelListRequest::InternalSwap(AccelListRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccelListRequest, _impl_.physical_)
      + sizeof(AccelListRequest::_impl_.physical_)
      - PROTOBUF_FIELD_OFFSET(AccelListRequest, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccelListRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_arax_2eproto_getter, &descriptor_table_arax_2eproto_once,
      file_level_metadata_arax_2eproto[12]);
}

// ===================================================================

class AccelListResponse::_Internal {
 public:
};

AccelListResponse::AccelListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:arax.AccelListResponse)
}
AccelListResponse::AccelListResponse(const AccelListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccelListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.descriptors_){from._impl_.descriptors_}
    , decltype(_impl_.accel_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.accel_num_ = from._impl_.accel_num_;
  // @@protoc_insertion_point(copy_constructor:arax.AccelListResponse)
}

inline void AccelListResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.descriptors_){arena}
    , decltype(_impl_.accel_num_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AccelListResponse::~AccelListResponse() {
  // @@protoc_insertion_point(destructor:arax.AccelListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccelListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.descriptors_.~RepeatedPtrField();
}

void AccelListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccelListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:arax.AccelListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.descriptors_.Clear();
  _impl_.accel_num_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccelListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 accel_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.accel_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .arax.AccelDescriptor descriptors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_descriptors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccelListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:arax.AccelListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 accel_num = 1;
  if (this->_internal_accel_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_accel_num(), target);
  }

  // repeated .arax.AccelDescriptor descriptors = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_descriptors_size()); i < n; i++) {
    const auto& repfield = this->_internal_descriptors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:arax.AccelListResponse)
  return target;
}

size_t AccelListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:arax.AccelListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .arax.AccelDescriptor descriptors = 2;
  total_size += 1UL * this->_internal_descriptors_size();
  for (const auto& msg : this->_impl_.descriptors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 accel_num = 1;
  if (this->_internal_accel_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_accel_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccelListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccelListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccelListResponse::GetClassData() const { return &_class_data_; }


void AccelListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccelListResponse*>(&to_msg);
  auto& from = static_cast<const AccelListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:arax.AccelListResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.descriptors_.MergeFrom(from._impl_.descriptors_);
  if (from._internal_accel_num() != 0) {
    _this->_internal_set_accel_num(from._internal_accel_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccelListResponse::CopyFrom(const AccelListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:arax.AccelListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccelListResponse::IsInitialized() const {
  return true;
}

void AccelListResponse::InternalSwap(AccelListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.descriptors_.InternalSwap(&other->_impl_.descriptors_);
  swap(_impl_.accel_num_, other->_impl_.accel_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccelListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_arax_2eproto_getter, &descriptor_table_arax_2eproto_once,
      file_level_metadata_arax_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace arax
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::arax::Success*
Arena::CreateMaybeMessage< ::arax::Success >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arax::Success >(arena);
}
template<> PROTOBUF_NOINLINE ::arax::ResourceID*
Arena::CreateMaybeMessage< ::arax::ResourceID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arax::ResourceID >(arena);
}
template<> PROTOBUF_NOINLINE ::arax::TaskRequest*
Arena::CreateMaybeMessage< ::arax::TaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arax::TaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::arax::Task*
Arena::CreateMaybeMessage< ::arax::Task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arax::Task >(arena);
}
template<> PROTOBUF_NOINLINE ::arax::DataSet*
Arena::CreateMaybeMessage< ::arax::DataSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arax::DataSet >(arena);
}
template<> PROTOBUF_NOINLINE ::arax::AccelRequest*
Arena::CreateMaybeMessage< ::arax::AccelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arax::AccelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::arax::AraxProc*
Arena::CreateMaybeMessage< ::arax::AraxProc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arax::AraxProc >(arena);
}
template<> PROTOBUF_NOINLINE ::arax::ProcRequest*
Arena::CreateMaybeMessage< ::arax::ProcRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arax::ProcRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::arax::RequestBuffer*
Arena::CreateMaybeMessage< ::arax::RequestBuffer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arax::RequestBuffer >(arena);
}
template<> PROTOBUF_NOINLINE ::arax::ProcCounter*
Arena::CreateMaybeMessage< ::arax::ProcCounter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arax::ProcCounter >(arena);
}
template<> PROTOBUF_NOINLINE ::arax::AccelDescriptor*
Arena::CreateMaybeMessage< ::arax::AccelDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arax::AccelDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::arax::RevisionResponse*
Arena::CreateMaybeMessage< ::arax::RevisionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arax::RevisionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::arax::AccelListRequest*
Arena::CreateMaybeMessage< ::arax::AccelListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arax::AccelListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::arax::AccelListResponse*
Arena::CreateMaybeMessage< ::arax::AccelListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::arax::AccelListResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
