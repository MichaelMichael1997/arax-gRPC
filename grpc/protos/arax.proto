syntax = "proto3";

import "google/protobuf/empty.proto";

package arax;

// ------------------------------ Arax Services -------------------------- 

service Arax{

 /*
  * Delete the shared segment
  */
  rpc Arax_clean(google.protobuf.Empty) returns (google.protobuf.Empty){}

 /*
  * Create an arax buffer object
  *
  */
  rpc Arax_buffer(RequestBuffer) returns (ResourceID) {}

 /*
  * Register a new process 'func name'
  */
  rpc Arax_proc_register(ProcRequest) returns (ResourceID) {}

 /*
  * Retrieve a previously registered process
  */
  rpc Arax_proc_get(ProcRequest) returns (ResourceID) {}

 /*
  * Delete registered arax_proc pointer
  */
  rpc Arax_proc_put(AraxProc) returns (ProcCounter){}

 /*
  * Acquire a virtual accelerator of a given type
  */
  rpc Arax_accel_acquire_type(AccelRequest) returns (ResourceID){}

 /*
  * Release a previously acquired accelerator
  */
  rpc Arax_accel_release(ResourceID) returns (google.protobuf.Empty){}

  /*
   * Set data to arax buffer
   */
   rpc Arax_data_set(DataSet) returns (google.protobuf.Empty){}

  /*
   * Return size of provided arax data 
   */
   rpc Arax_data_size(ResourceID) returns (DataSet) {}

  /*
   * Get the data from buffer and return them
   */
   rpc Arax_data_get(ResourceID) returns (DataSet) {}

  /*
   * Decrease ref counter of task
   */
   rpc Arax_task_free(Task) returns (google.protobuf.Empty){}

  /*
   * Issue a new arax_task
   */
   rpc Arax_task_issue(TaskRequest) returns (ResourceID){}

   /*
    * Wait for an issued task to complete or fail
    */
    rpc Arax_task_wait(Task) returns (Task){}
}


// ------------------------------ Request messages -------------------------- 
// TODO:Request/Response messages are all over the place right now
// Could 'combine' some of them into one, for example a unified Request/Response message 

message Success{
  bool success = 1;
}

message ResourceID{
  uint64 id = 1;
}

message TaskRequest{
  uint64 accel = 1;
  uint64 proc = 2;
  uint32 in_count = 3;
  uint64 in_buffer = 4;
  uint32 out_count = 5;
  uint64 out_buffer = 6;
}

message Task{
  uint64 task_id = 1;
  uint32 task_state = 2;
}

// This is subject to changes/additions depending on the type of data that can be passed
// to the arax buffer
message DataSet{
  uint64 buffer = 1; 
  uint64 accel = 2;
  string str_val = 3;
  // rather than having string str_val, we could use bytes
  // It all depends on the data that we can pass to buffers
  uint64 data_size = 4; // field used for arax_data_size
}

message AccelRequest{
  uint32 type = 1;
}

message AraxProc{
  uint64 id = 1;
}

message ProcRequest{
  string func_name = 2; 
}

message RequestBuffer{
  uint64 buffer_size = 1; 
}

message ProcCounter{
  uint32 proc_counter = 1;
}


message RevisionResponse{
  string revision = 1;
}





